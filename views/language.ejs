<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Internationalization</title>

    <!-- update the version number as needed -->
    <script defer src="https://test-b5dbd.firebaseapp.com/__/firebase/4.1.3/firebase-app.js"></script>
    <!-- include only the Firebase features as you need -->
    <script defer src="https://test-b5dbd.firebaseapp.com/__/firebase/4.1.3/firebase-auth.js"></script>
    <script defer src="https://test-b5dbd.firebaseapp.com/__/firebase/4.1.3/firebase-database.js"></script>
    <script defer src="https://test-b5dbd.firebaseapp.com/__/firebase/4.1.3/firebase-messaging.js"></script>
    <script defer src="https://test-b5dbd.firebaseapp.com/__/firebase/4.1.3/firebase-storage.js"></script>
    <!-- initialize the SDK after all desired features are loaded -->
    <script defer src="https://test-b5dbd.firebaseapp.com/__/firebase/init.js"></script>

    <!-- CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.5/css/materialize.min.css" rel='stylesheet' type='text/css'>
    <link href="css/site.css" rel='stylesheet' type='text/css'>

    <!-- Load FirebaseUI for Auth popup -->
    <script src="https://cdn.firebase.com/libs/firebaseui/2.2.1/firebaseui.js"></script>
    <link type="text/css" rel="stylesheet" href="https://cdn.firebase.com/libs/firebaseui/2.2.1/firebaseui.css" />

    <!--jQuery dependencies-->
   <link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.9.2/themes/base/jquery-ui.css" />
   <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
   <script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.9.2/jquery-ui.min.js"></script>

   <!--ParamQuery Grid files. PQGrid docs: https://paramquery.com/api-->
   <link rel="stylesheet" href="css/pqgrid.min.css" />
   <script type="text/javascript" src="js/pqgrid.min.js" ></script>
  </head>
  <body>
    <div class="center-align" style="margin-top: 30px;">
        <a href="/" class="waves-effect waves-light btn blue">Admin Portal</a>
    </div>

    <div class="center-align container" >
      <h2 class="center-align">Welcome to the Internationalization Control Panel</h2>
      <p class="center-align">
        Here you can edit how the Venligboerne app translates to various languages.
        Using the table presented here, you can make basic edit existing entries. The
        changes will not saved permanently (or visible in the app) until you click
        "Save". Be careful when saving changes - there is now way to g back
        to earlier versions. If you are not sure what you're about to do is safe,
        click "Download" to save the old data to your computer.
      </p>

      <p>
        If you want to make more advanced edits, like adding or removing words, or adding
        and removing languages, click "Download". Open the resulting file (language.xls)
        with Microsoft Excel. You may get a warning about the file extension not matching.
        Click "Yes" to continue. Edit the language table however you want. You can
        add or remove words or add or remove languages. You may get a warning from Excel
        when you save. Click "continue". Then come back to this webpage and click
        "Upload", and select the file you saved. You should see your changes appear here.
        The changes are not yet saved in the database. Review your changes, and once you
        are sure they are correct, click "Save". Your changes should now be visible in the
        app.
      </p>

      <input type="submit" id="save_button" value="Save" />
      <input type="submit" id="download_button" value="Download" />

      <label for="upload" id="upload_button">Upload</label>
      <input type="file" id="upload" name="upload" style="display: none" />

      <a style="display: none" id="download" download="language.xls">Download</a>

      <div id="grid_array" class="center-align" style="margin-top: 20px"></div>
    </div>



    <script>
    const grid = $('#grid_array');
const row_sep = '\r\n';
const col_sep = '\t';
var header;
var first_entry;

// initGridWithContents
// -------------------------------------------------------------------
// Turn the DOM element specified in the "grid" global, and turn it into
// a PqGrid table with the given data and column titles from the "header"
// global.
function initGridWithContents(data) {
	var obj = {
		width: '100%',
		height: 500,
		colModel: header.map(val => {
			return { title: val, width: 100, dataType: 'string' };
		}),
		dataModel: { data: data },
		collapsible: false,
		showTop: false
	};
	console.log(obj);
	grid.pqGrid(obj);
}
// loadTableContents
// -------------------------------------------------------------------
// Pulls the language data from the database and calls initGridWithContents
// with that data. If the user is not logged into an authorized account,
// this redirects to the Google login page.
function loadTableContents() {
	firebase.database().ref('language').once('value', snapshot => {
		let lang = snapshot.val();
		header = ['Key'].concat(Object.keys(lang[Object.keys(lang)[0]]));
		first_entry = Object.keys(lang)[0];
		var rows = [];
		for (prop in lang) {
			rows.push([prop].concat(Object.values(lang[prop])));
		}
		initGridWithContents(rows);
	}, function(error) {
		// If the user doesn't have access, send them to the Google sign in page
		console.error('Loading data failed', error);
		signin();
	});
}
// getTableContents
// -------------------------------------------------------------------
// Returns a 2D array containing the contents of the table.
function getTableContents() {
	range = [];
	for (var i = 0; i < header.length; i++) range.push(i);
	data = grid.pqGrid('getData', { dataIndx: range });
	for (var i = 0; i < data.length; i++) {
		data[i] = $.map(data[i], function(value, index) {
			return [value];
		});
	}
	return data;
}
// saveTableContents
// -------------------------------------------------------------------
// Grab the contents of the PQGrid table and save them to Firebase.
function saveTableContents() {
	data = getTableContents();
	json = {};
	for (var i = 0; i < data.length; i++) {
		var row = data[i];
		var row_json = {};
		for (var j = 1; j < row.length; j++) {
			row_json[header[j]] = row[j];
		}
		json[row[0]] = row_json;
	}
	try {
		firebase.database().ref('language').set(json, function(error) {
			if (error != null) {
				console.error(error);
				alert('Write to database failed: ' + error);
			}
		});
	} catch (e) {
		console.log(e);
		alert(e);
	}
}
// Function to pad a string on the left. Used for zero padding hex values in triggerDownload.
String.prototype.lpad = function(padString, length) {
	var str = this;
	while (str.length < length) str = padString + str;
	return str;
};
// triggerDownload
// -------------------------------------------------------------------
// Starts a download to the user of the contents of the table, in tab
// separated value format. The output encoding is UTF-16.
function triggerDownload() {
	data = getTableContents();
	data = $.map(data, function(value, index) {
		return value.join(col_sep);
	});

	download = header.join(col_sep) + row_sep + data.join(row_sep);
	// Change character encoding to UTF-16 manually, and URI encode it
	// encodeURIComponent only outputs UTF-8
	var utf16_download = '';
	for (var i = 0; i < download.length; i++) {
		var char = download.charCodeAt(i);
		var big = char >> 8;
		var little = char & 0xff;
		utf16_download +=
			'%' +
			little.toString(16).lpad('0', 2) +
			'%' +
			big.toString(16).lpad('0', 2);
	}
	// The %FF%FE is a BOM (Byte Order Mark)
	uriContent = 'data:text/plain;charset=UTF-16,%FF%FE' + utf16_download;
	$('#download').attr('href', uriContent)[0].click();
	// This used to produce garbled files. This StackOverflow post has relevant info
	// https://stackoverflow.com/questions/6002256/is-it-possible-to-force-excel-recognize-utf-8-csv-files-automatically/6002338#6002338
}
// processUpload
// -------------------------------------------------------------------
// When the user picks a file to upload, this function reads the contents
// of the file, parses them, and displays them in the table. It does NOT
// save the data to the database.
function processUpload(evt) {
	var file = evt.target.files[0]; // User uploaded file handle
	var reader = new FileReader();
	// Closure to capture the file information.
	reader.onload = (function(theFile) {
		return function(e) {
			var contents = e.target.result;
			console.log(contents);
			contents = contents.split(row_sep);
			// Filter out blank lines
			contents = contents.filter(function(str) {
				return str.replace(/\s/g, '').length > 0;
			});
			// Split up the rows and check for empty keys
			var hasBlankKey = false;
			contents = $.map(contents, function(value, index) {
				var row = value.split(col_sep);
				if (row[0].length == 0) {
					hasBlankKey = true;
				}
				// Remove wrapping quotes
				row = row.map(function(str) {
					return str.replace(/""/g, '').replace(/^"|"$/g, '');
				});
				return [row];
			});

			console.log(contents);
			// Push the data back into the table view
			grid.pqGrid('destroy');
			header = contents[0];
			initGridWithContents(contents.slice(1));
			if (hasBlankKey) {
				alert(
					'Warning: Every row must have a key. This is how the app refers to the word or phrase in code.'
				);
			}
		};
	})(file);
	reader.readAsText(file);
}
// This is the code entry point. This is JQuery shorthand for
// "once the page is loaded, call this function".
$(function() {
	loadTableContents();
	$('#download_button').button().click(function() {
		triggerDownload();
	});
	$('#save_button').button().click(function() {
		saveTableContents();
	});
	$('#upload_button').button();
	document
		.getElementById('upload')
		.addEventListener('change', processUpload, false);
});
</script>
  </body>
</html>
